package io.kotest.generation.kotest

import io.kotest.generation.common.*
import java.io.File
import kotlin.reflect.KClass
import kotlin.reflect.KFunction
import kotlin.reflect.full.primaryConstructor

object DefaultKotestGenerator: CodeGenerator {
    override fun generateCode(data: KotestData): String {
        val tests = data.testsForMethods.map { method -> method.sourceCodeAsOneString() }.joinToString("\n\n")
        return """
package ${data.packageName}

import io.kotest.assertions.assertSoftly
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe
import io.kotest.core.spec.IsolationMode
import io.mockk.every
import io.mockk.mockk

${data.classesToImport.sorted().joinToString("\n") {"import $it" }}

// generated by io.kotest.generation:kotests-generator
class ${data.simpleName}Kotest: StringSpec() {
override fun isolationMode() = IsolationMode.InstancePerTest

private val systemToTest = ${data.systemToTest.sourceCode().joinToString("\n")}

init {
$tests
}
}
        """.trimIndent()
    }
}


fun unitKotest(method: KFunction<*>, codeSnippetFactory: CodeSnippetFactory): CodeSnippet {
    val codeSnippet = CodeSnippet()
    codeSnippet.addLine("\"${method.name} works\" {")
    addMethodInvocationToKotest(codeSnippet, method, codeSnippetFactory)
    if(!isVoid(method)) {
        addAssertionsToKotest(codeSnippet, method, codeSnippetFactory)
    }
    codeSnippet.addLine("}")
    return codeSnippet
}

fun addAssertionsToKotest(
    codeSnippet: CodeSnippet,
    method: KFunction<*>,
    codeSnippetFactory: CodeSnippetFactory
) {
    if(kTypeToKClass(method.returnType).isData) {
        addAssertionsPerFieldToKotest(codeSnippet, method, codeSnippetFactory)
    } else {
        addOneAssertionToKotest(codeSnippet, method, codeSnippetFactory)
    }
}

private fun addAssertionsPerFieldToKotest(
    codeSnippet: CodeSnippet,
    method: KFunction<*>,
    codeSnippetFactory: CodeSnippetFactory
) {
    codeSnippet.addLine("assertSoftly {")
    val returnedClass = kTypeToKClass(method.returnType)
    val returnedInstanceParameters = returnedClass.primaryConstructor?.parameters ?: listOf()
    codeSnippetFactory.initializeParameters(returnedInstanceParameters, codeSnippet, ::assertionForField)
    codeSnippet.addLine("}")
}

private fun addOneAssertionToKotest(
    codeSnippet: CodeSnippet,
    method: KFunction<*>,
    codeSnippetFactory: CodeSnippetFactory
) {
    val returnedClass = kTypeToKClass(method.returnType)
    codeSnippetFactory.addValue(returnedClass, codeSnippet, false, ::assertionForInstance, "actual")
}

private fun addMethodInvocationToKotest(
    codeSnippet: CodeSnippet,
    method: KFunction<*>,
    codeSnippetFactory: CodeSnippetFactory
) {
    codeSnippet.addLine("${if(isVoid(method)) "" else "val actual = "}systemToTest.${method.name}(")
    val methodParameters = methodParameters(method)
    codeSnippetFactory.initializeParameters(methodParameters, codeSnippet, ::parameterToValueAssignment)
    codeSnippet.addLine(")")
}

typealias NameValueFormatter = (String, String, Boolean) -> String

fun parameterToValueAssignment(
    name: String,
    value: String,
    isLast: Boolean
): String {
    return "$name = $value${if(isLast) "" else ","}"
}

fun parameterToAnyAssignment(
    name: String,
    value: String,
    isLast: Boolean
): String {
    return "$name = any()${if(isLast) "" else ","}"
}

fun assertionForField(
    name: String,
    value: String,
    isLast: Boolean
): String {
    return "actual.$name shouldBe $value"
}

fun assertionForInstance(
    name: String,
    value: String,
    isLast: Boolean
): String {
    return "actual shouldBe $value"
}

fun onlyValue(
    name: String,
    value: String,
    isLast: Boolean
): String {
    return "$value${if(isLast) "" else ","}"
}

fun generateKotests(filename: String,
                   klass: KClass<*>,
                   vararg methods: KFunction<*>) =
    generateKotestsWithCustomClasses(CodeSnippetFactory(), filename, klass, *methods)


fun CodeSnippetFactory.generateKotests(filename: String,
                    klass: KClass<*>,
                    vararg methods: KFunction<*>) =
    generateKotestsWithCustomClasses(this, filename, klass, *methods)

private fun generateKotestsWithCustomClasses(
    codeSnippetFactory: CodeSnippetFactory,
    filename: String,
                    klass: KClass<*>,
                    vararg methods: KFunction<*>) {
    val data = KotestDataFactory().get(
        codeSnippetFactory,
        klass,
        *methods
    )
    val code = DefaultKotestGenerator.generateCode(data)
    File(filename).writeText(code)
}

