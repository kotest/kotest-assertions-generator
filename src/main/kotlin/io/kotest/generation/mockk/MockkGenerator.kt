package io.kotest.generation.mockk

import io.kotest.generation.common.*
import io.kotest.generation.kotest.parameterToValueAssignment
import io.kotest.generation.kotest.parameterToAnyAssignment
import io.kotest.generation.sample.PublicCallablesFactory
import java.io.File
import kotlin.reflect.KCallable
import kotlin.reflect.KClass

object DefaultMockkGenerator {
        fun generateCode(data: MockkData): String {
            return """
package ${data.packageName}

import io.mockk.every
import io.mockk.mockk
import io.mockk.justRun

${data.qualifiedNames().sorted().joinToString("\n") { "import $it" }}

// generated by io.kotest.generation:kotests-generator
object Mockk${data.simpleName} {
    fun get(): ${data.simpleName} {
        val ret = mockk<${data.simpleName}>(relaxed = true)
        
        ${data.mockksForMethods.joinToString("\n\n") { mockk -> mockk.sourceCodeAsOneString() }}
        
        return ret
    }
}
        """.trimIndent()
        }

    fun generateAsValue(data: MockkData): CodeSnippet {
        val ret = CodeSnippet()
        listOf("io.mockk.every", "io.mockk.mockk", "io.mockk.justRun").forEach {
            ret.addClassName(it)
        }
        listOf(
            "run {",
            "val ret = mockk<${data.simpleName}>(relaxed = true)",
            data.mockksForMethods.joinToString("\n\n") { mockk -> mockk.sourceCodeAsOneString() },
            "ret",
            "}"
        ).forEach {
            ret.addLine(it)
        }
        return ret
    }
}

fun mockkedMethod(method: KCallable<*>, codeSnippetFactory: CodeSnippetFactory): CodeSnippet {
    val ret = mockkedMethod(method, codeSnippetFactory, ::parameterToAnyAssignment)
    if(hasParameters(method)) {
        ret.add(
            mockkedMethod(method, codeSnippetFactory, ::parameterToValueAssignment)
        )
    }
    return ret
}

fun mockkedMethod(method: KCallable<*>,
                  codeSnippetFactory: CodeSnippetFactory,
                  parameterFormatter: (String, String, Boolean) -> String) =
    if(isVoid(method)) mockkedVoidMethod(method, codeSnippetFactory, parameterFormatter) else
        mockkedMethodThatReturnsInstance(method, codeSnippetFactory, parameterFormatter)

fun mockkedMethodThatReturnsInstance(
    method: KCallable<*>,
    codeSnippetFactory: CodeSnippetFactory,
    parameterFormatter: (String, String, Boolean) -> String
): CodeSnippet {
    val codeSnippet = mockkStubSnippet(method, codeSnippetFactory, parameterFormatter, NonVoidCallFormat)
    val returnedClass = kTypeToKClass(method.returnType)
    val returnedValue = sampleValue(returnedClass, codeSnippetFactory)
    codeSnippet.add(returnedValue)
    return codeSnippet
}

private fun mockkStubSnippet(
    method: KCallable<*>,
    codeSnippetFactory: CodeSnippetFactory,
    parameterFormatter: (String, String, Boolean) -> String,
    mockkMethodCallFormat: MockkMethodCallFormat
): CodeSnippet {
    val codeSnippet = CodeSnippet()
    val methodParameters = methodParameters(method)
    if (methodParameters.isEmpty()) {
        val optionalBrackets = if (isProperty(method)) "" else "()"
        codeSnippet.addLine("${mockkMethodCallFormat.prefix} { ret.${method.name}$optionalBrackets } ${mockkMethodCallFormat.suffix} ")
    } else {
        codeSnippet.addLine("${mockkMethodCallFormat.prefix} { ret.${method.name}(")
        codeSnippetFactory.initializeParameters(methodParameters, codeSnippet, parameterFormatter)
        codeSnippet.addLine(")} ${mockkMethodCallFormat.suffix} ")
    }
    return codeSnippet
}

private interface MockkMethodCallFormat {
    val prefix: String
    val suffix: String
}

private object VoidCallFormat: MockkMethodCallFormat {
    override val prefix: String
        get() = "justRun"
    override val suffix: String
        get() = ""
}

private object NonVoidCallFormat: MockkMethodCallFormat {
    override val prefix: String
        get() = "every"
    override val suffix: String
        get() = " returns"
}

fun mockkedVoidMethod(
    method: KCallable<*>,
    codeSnippetFactory: CodeSnippetFactory,
    parameterFormatter: (String, String, Boolean) -> String
): CodeSnippet {
    return mockkStubSnippet(method, codeSnippetFactory, parameterFormatter, VoidCallFormat)
}

fun generateAllMockks(klass: KClass<*>, fileName: String
                   ) =
    generateMockks(klass, fileName,
        *(PublicCallablesFactory().callablesToMock(klass).toTypedArray()))

fun generateMockks(
                   klass: KClass<*>, filename: String,
                   vararg methods: KCallable<*>
) =
    generateMockksWithCustomClasses(CodeSnippetFactory(), filename, klass, *methods)

fun CodeSnippetFactory.generateMockks(filename: String,
                                      klass: KClass<*>) =
    generateMockksWithCustomClasses(this, filename, klass,
        *(PublicCallablesFactory().callablesToMock(klass).toTypedArray()))

fun CodeSnippetFactory.generateMockks(filename: String,
                   klass: KClass<*>,
                   vararg methods: KCallable<*>) =
    generateMockksWithCustomClasses(this, filename, klass, *methods)

private fun generateMockksWithCustomClasses(
    codeSnippetFactory: CodeSnippetFactory,
                   filename: String,
                   klass: KClass<*>,
                   vararg methods: KCallable<*>
) {
    val mockkData = MockkDataFactory().get(codeSnippetFactory, klass, *methods)
    val code = DefaultMockkGenerator.generateCode(mockkData)
    File(filename).writeText(code)
}