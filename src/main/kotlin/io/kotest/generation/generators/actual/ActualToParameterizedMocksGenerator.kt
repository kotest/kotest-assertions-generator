package io.kotest.generation.generators.actual

import io.kotest.generation.actual.ActualInstanceFactory
import io.kotest.generation.actual.SerializeToMockFieldNamesStrategy
import io.kotest.generation.actual.SerializeToParameterizedMockStrategy
import io.kotest.generation.common.*
import java.io.File

fun serializeToParameterizedMocks(filename: String,
                            vararg instances: Any
) = serializeToParameterizedMocksWithCustomization(
    ActualInstanceFactory(),
    filename,
    *instances
)

fun ActualInstanceFactory.serializeToParameterizedMocks(filename: String,
                                            vararg instances: Any
) = serializeToParameterizedMocksWithCustomization(
    this,
    filename,
    *instances
)

private fun serializeToParameterizedMocksWithCustomization(
    factory: ActualInstanceFactory,
    filename: String,
    vararg instances: Any
) {
    val parametersFactory = ActualInstanceFactory(
        factory.customSerializers,
        SerializeToParameterizedMockStrategy
    )
    val fieldsFactory = ActualInstanceFactory(
        factory.customSerializers,
        SerializeToMockFieldNamesStrategy
    )
    val serializedInstances = instances.map {
        when {
            isInstanceOfDataClass(it) -> CodeForFunction(
                it::class.simpleName!!,
                it::class.qualifiedName!!,
                parametersFactory.serializeInstance(it),
                fieldsFactory.serializeInstance(it)
            )
            else -> {
                val oneLiner =
                    CodeSnippet.oneLiner("//Cannot serialize ${it::class.qualifiedName} because not a data class")
                CodeForFunction(
                    "Any",
                    "kotlin.Any",
                    oneLiner,
                    oneLiner
                )
            }
        }
    }
    val classesToImport = ImportsGenerator().generate(serializedInstances.map { it.parameters })
    val code = """package generated.code

import io.mockk.every
import io.mockk.mockk
${classesToImport.joinToString("\n") {"import $it" }}

// generated by io.kotest.generation:kotests-generator
object SerializedMocks {
${serializedInstances.mapIndexed { 
            index, instance -> 
            "fun mock$index(\n" +
                    "${instance.parameters.sourceCodeAsOneString()}\n" +
                    "): ${instance.simpleName} {\n" +
            "val ret = mockk<${instance.simpleName}>()\n" +
                    instance.body.sourceCodeAsOneString() +
            "\nreturn ret\n}" }.joinToString("\n\n")}
}
        """.trimIndent()
    File(filename).writeText(code)
}

data class CodeForFunction(
    val simpleName: String,
    val qualifiedName: String,
    val parameters: CodeSnippet,
    val body: CodeSnippet
)