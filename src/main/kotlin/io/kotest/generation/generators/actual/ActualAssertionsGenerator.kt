package io.kotest.generation.generators.actual

import io.kotest.generation.actual.ActualInstanceFactory
import io.kotest.generation.actual.SerializeToAssertionStrategy
import io.kotest.generation.common.*
import java.io.File

fun serializeToAssertions(vararg instances: Any
) = serializeToAssertionsWithCustomization(
    ActualInstanceFactory(),
    "AssertionsFrom${simpleNameOfFirstInstance(*instances)}.kt",
    *instances
)

fun serializeToAssertions(filename: String,
                            vararg instances: Any
) = serializeToAssertionsWithCustomization(
    ActualInstanceFactory(),
    filename,
    *instances
)

fun ActualInstanceFactory.serializeToAssertions(filename: String,
                                            vararg instances: Any
) = serializeToAssertionsWithCustomization(
    this,
    filename,
    *instances
)

private fun serializeToAssertionsWithCustomization(
    factory: ActualInstanceFactory,
    filename: String,
    vararg instances: Any
) {
    val assertionsFactory = ActualInstanceFactory(
        factory.customSerializers,
        SerializeToAssertionStrategy
    )
    val serializedInstances = instances.map {
        when {
            isInstanceOfDataClass(it) ->         TypedCode(
                it::class.simpleName!!,
                it::class.qualifiedName!!,
                assertionsFactory.serializeInstance(it)
            )
            else -> TypedCode(
                "Any",
                "kotlin.Any",
                CodeSnippet.oneLiner("//Cannot serialize ${it::class.qualifiedName} because not a data class")
            )
        }
    }
    val classesToImport = ImportsGenerator().generate(serializedInstances.map { it.code })
    val code = """package generated.code

import io.kotest.assertions.assertSoftly
import io.kotest.matchers.shouldBe
${classesToImport.joinToString("\n") {"import $it" }}

// generated by io.kotest.generation:kotests-generator
object SerializedAssertions {
${serializedInstances.mapIndexed { 
            index, instance -> "fun assertion$index(actual: ${instance.simpleName})\n" +
            "{\nassertSoftly {\n ${instance.code.sourceCodeAsOneString()}\n}\n}" }.joinToString("\n\n")}
}
        """.trimIndent()
    File(filename).writeText(code)
}

