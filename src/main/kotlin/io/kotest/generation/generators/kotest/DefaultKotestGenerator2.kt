package io.kotest.generation.generators.kotest

import io.kotest.generation.sample.PublicCallablesFactory
import io.kotest.generation.sample.SampleInstanceFactory
import java.io.File
import kotlin.reflect.KCallable
import kotlin.reflect.KClass

class DefaultKotestGenerator2 {

    fun generateCode(data: KotestsSuite): String {
        val tests = data.tests.map { method -> method.sourceCodeAsOneString() }.joinToString("\n\n")
        return """
package ${data.packageName}

import io.kotest.assertions.assertSoftly
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe
import io.kotest.core.spec.IsolationMode
import io.mockk.every
import io.mockk.mockk
${data.classesToImport.distinct().sorted().joinToString("\n") { "import $it" }}

// generated by io.kotest.generation:kotests-generator
class ${data.simpleName}Kotest: StringSpec() {
override fun isolationMode() = IsolationMode.InstancePerTest

private val systemToTest = ${data.systemToTest.sourceCode().joinToString("\n")}

init {
$tests
}
}
        """.trimIndent()
    }
}

fun SampleInstanceFactory.generateAllKotests(
    filename: String,
    klass: KClass<*>
) = this.generateKotests(filename, klass, *(PublicCallablesFactory().callablesToTest(klass).toTypedArray()))

fun SampleInstanceFactory.generateKotests(
    filename: String,
    klass: KClass<*>,
    vararg methods: KCallable<*>
) =
    generateKotestsWithCustomClasses(this, filename, klass, *methods)

private fun generateKotestsWithCustomClasses(
    codeSnippetFactory: SampleInstanceFactory,
    filename: String,
    klass: KClass<*>,
    vararg methods: KCallable<*>
) {
    val data = KotestsSuiteFactory(codeSnippetFactory).generateKotests(
        klass,
        methods.toList()
    )
    val code = DefaultKotestGenerator2().generateCode(data)
    File(filename).writeText(code)
}
